{"version":3,"file":"main.mjs","mappings":"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","sources":["webpack://qb-answer-checker/./node_modules/damerau-levenshtein-js/app.js","webpack://qb-answer-checker/./node_modules/number-to-words/numberToWords.min.js","webpack://qb-answer-checker/./node_modules/roman-numerals/index.js","webpack://qb-answer-checker/./node_modules/roman-numerals/lib/toArabic.js","webpack://qb-answer-checker/./node_modules/roman-numerals/lib/toRoman.js","webpack://qb-answer-checker/webpack/bootstrap","webpack://qb-answer-checker/webpack/runtime/global","webpack://qb-answer-checker/./node_modules/stemmer/index.js","webpack://qb-answer-checker/./src/contains-tokens.js","webpack://qb-answer-checker/./src/utils.js","webpack://qb-answer-checker/./src/generate-unformatted-answers.js","webpack://qb-answer-checker/./src/constants.js","webpack://qb-answer-checker/./src/split-section-into-clauses.js","webpack://qb-answer-checker/./src/tokenize.js","webpack://qb-answer-checker/./src/check-answer.js","webpack://qb-answer-checker/./src/split-into-sections.js","webpack://qb-answer-checker/./src/get-special-directives.js"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2018 Fabvalaaah - fabvalaaah@laposte.net\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * DISCLAIMER:\n * I am not responsible in any way of any consequence of the usage of this piece\n * of software. You are warned, use it at your own risks.\n */\n\nconst initMatrix = (s1, s2) => {\n  /* istanbul ignore next */\n  if (undefined == s1 || undefined == s2) {\n    return null;\n  }\n\n  let d = [];\n  for (let i = 0; i <= s1.length; i++) {\n    d[i] = [];\n    d[i][0] = i;\n  }\n  for (let j = 0; j <= s2.length; j++) {\n    d[0][j] = j;\n  }\n\n  return d;\n};\n\nconst damerau = (i, j, s1, s2, d, cost) => {\n  if (i > 1 && j > 1 && s1[i - 1] === s2[j - 2] && s1[i - 2] === s2[j - 1]) {\n    d[i][j] = Math.min.apply(null, [d[i][j], d[i - 2][j - 2] + cost]);\n  }\n};\n\nconst distance = (s1, s2) => {\n  if (\n    undefined == s1 ||\n    undefined == s2 ||\n    \"string\" !== typeof s1 ||\n    \"string\" !== typeof s2\n  ) {\n    return -1;\n  }\n\n  let d = initMatrix(s1, s2);\n  /* istanbul ignore next */\n  if (null === d) {\n    return -1;\n  }\n  for (var i = 1; i <= s1.length; i++) {\n    let cost;\n    for (let j = 1; j <= s2.length; j++) {\n      if (s1.charAt(i - 1) === s2.charAt(j - 1)) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n\n      d[i][j] = Math.min.apply(null, [\n        d[i - 1][j] + 1,\n        d[i][j - 1] + 1,\n        d[i - 1][j - 1] + cost,\n      ]);\n\n      damerau(i, j, s1, s2, d, cost);\n    }\n  }\n\n  return d[s1.length][s2.length];\n};\n\nconst distanceProm = (s1, s2) =>\n  new Promise((resolve, reject) => {\n    let result = distance(s1, s2);\n    if (0 <= result) {\n      resolve(result);\n    } else {\n      reject(result);\n    }\n  });\n\nconst minDistanceProm = (s1, list) =>\n  new Promise((resolve, reject) => {\n    if (undefined == list || !Array.isArray(list)) {\n      reject(-1);\n      return;\n    } else if (0 === list.length) {\n      resolve(distance(s1, \"\"));\n      return;\n    }\n\n    let min = -2;\n\n    list.forEach((s2) => {\n      let d = distance(s1, s2);\n      if (-2 === min || d < min) {\n        min = d;\n      }\n    });\n\n    if (0 <= min) {\n      resolve(min);\n    } else {\n      reject(min);\n    }\n  });\n\nmodule.exports = {\n  distanceProm,\n  distance,\n  minDistanceProm,\n};\n","/*!\n * Number-To-Words util\n * @version v1.2.4\n * @link https://github.com/marlun78/number-to-words\n * @author Martin Eneqvist (https://github.com/marlun78)\n * @contributors Aleksey Pilyugin (https://github.com/pilyugin),Jeremiah Hall (https://github.com/jeremiahrhall),Adriano Melo (https://github.com/adrianomelo),dmrzn (https://github.com/dmrzn)\n * @license MIT\n */\n!function(){\"use strict\";var e=\"object\"==typeof self&&self.self===self&&self||\"object\"==typeof global&&global.global===global&&global||this,t=9007199254740991;function f(e){return!(\"number\"!=typeof e||e!=e||e===1/0||e===-1/0)}function l(e){return\"number\"==typeof e&&Math.abs(e)<=t}var n=/(hundred|thousand|(m|b|tr|quadr)illion)$/,r=/teen$/,o=/y$/,i=/(zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)$/,s={zero:\"zeroth\",one:\"first\",two:\"second\",three:\"third\",four:\"fourth\",five:\"fifth\",six:\"sixth\",seven:\"seventh\",eight:\"eighth\",nine:\"ninth\",ten:\"tenth\",eleven:\"eleventh\",twelve:\"twelfth\"};function h(e){return n.test(e)||r.test(e)?e+\"th\":o.test(e)?e.replace(o,\"ieth\"):i.test(e)?e.replace(i,a):e}function a(e,t){return s[t]}var u=10,d=100,p=1e3,v=1e6,b=1e9,y=1e12,c=1e15,g=9007199254740992,m=[\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"],w=[\"zero\",\"ten\",\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"];function x(e,t){var n,r=parseInt(e,10);if(!f(r))throw new TypeError(\"Not a finite number: \"+e+\" (\"+typeof e+\")\");if(!l(r))throw new RangeError(\"Input is not a safe number, it’s either too large or too small.\");return n=function e(t){var n,r,o=arguments[1];if(0===t)return o?o.join(\" \").replace(/,$/,\"\"):\"zero\";o||(o=[]);t<0&&(o.push(\"minus\"),t=Math.abs(t));t<20?(n=0,r=m[t]):t<d?(n=t%u,r=w[Math.floor(t/u)],n&&(r+=\"-\"+m[n],n=0)):t<p?(n=t%d,r=e(Math.floor(t/d))+\" hundred\"):t<v?(n=t%p,r=e(Math.floor(t/p))+\" thousand,\"):t<b?(n=t%v,r=e(Math.floor(t/v))+\" million,\"):t<y?(n=t%b,r=e(Math.floor(t/b))+\" billion,\"):t<c?(n=t%y,r=e(Math.floor(t/y))+\" trillion,\"):t<=g&&(n=t%c,r=e(Math.floor(t/c))+\" quadrillion,\");o.push(r);return e(n,o)}(r),t?h(n):n}var M={toOrdinal:function(e){var t=parseInt(e,10);if(!f(t))throw new TypeError(\"Not a finite number: \"+e+\" (\"+typeof e+\")\");if(!l(t))throw new RangeError(\"Input is not a safe number, it’s either too large or too small.\");var n=String(t),r=Math.abs(t%100),o=11<=r&&r<=13,i=n.charAt(n.length-1);return n+(o?\"th\":\"1\"===i?\"st\":\"2\"===i?\"nd\":\"3\"===i?\"rd\":\"th\")},toWords:x,toWordsOrdinal:function(e){return h(x(e))}};\"undefined\"!=typeof exports?(\"undefined\"!=typeof module&&module.exports&&(exports=module.exports=M),exports.numberToWords=M):e.numberToWords=M}();","(function () {\n  module.exports = {\n    toArabic: require('./lib/toArabic.js'),\n    toRoman:require('./lib/toRoman.js')\n  };\n})();\n","(function () {\n  var forEach = Array.prototype.forEach;\n\n\n  /**\n   * Converts a roman number to its arabic equivalent.\n   *\n   * Will throw TypeError on non-string inputs.\n   *\n   * @param {String} roman\n   * @return {Number}\n   */\n  function toArabic (roman) {\n    if (('string' !== typeof roman) && (!(roman instanceof String))) throw new TypeError('toArabic expects a string');\n\n    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as\n    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero\n    if (/^nulla$/i.test(roman) || !roman.length) return 0;\n\n    // Ultra magical regexp to validate roman numbers!\n    roman = roman.toUpperCase().match(/^(M{0,3})(CM|DC{0,3}|CD|C{0,3})(XC|LX{0,3}|XL|X{0,3})(IX|VI{0,3}|IV|I{0,3})$/);\n    if (!roman) throw new Error('toArabic expects a valid roman number');\n    var arabic = 0;\n\n    // Crunching the thousands...\n    arabic += roman[1].length * 1000;\n\n    // Crunching the hundreds...\n    if (roman[2] === 'CM') arabic += 900;\n    else if (roman[2] === 'CD') arabic += 400;\n    else arabic += roman[2].length * 100 + (roman[2][0] === 'D' ? 400 : 0);\n\n\n    // Crunching the tenths\n    if (roman[3] === 'XC') arabic += 90;\n    else if (roman[3] === 'XL') arabic += 40;\n    else arabic += roman[3].length * 10 + (roman[3][0] === 'L' ? 40 : 0);\n\n    // Crunching the...you see where I'm going, right?\n    if (roman[4] === 'IX') arabic += 9;\n    else if (roman[4] === 'IV') arabic += 4;\n    else arabic += roman[4].length * 1 + (roman[4][0] === 'V' ? 4 : 0);\n    return arabic;\n  };\n\n\n  module.exports = toArabic;\n\n})();\n","(function () {\n  /**\n   * Generate the roman number for the current power of tenth\n   *\n   * @param {Number} num\n   * @param {String} one\n   * @param {String} five\n   * @param {String} ten\n   * @return {String}\n   */\n  function upToTen (num, one, five, ten) {\n    var value = '';\n    switch (num) {\n      case 0: return value;\n      case 9: return one + ten;\n      case 4: return one + five;\n    }\n    if (num >= 5) value = five, num -= 5;\n    while (num-- > 0) value += one;\n    return value;\n  }\n\n\n  /**\n   * Converts an arabic number from 0 to 3999 to its roman equivalent.\n   *\n   * Will throw TypeError on non-number inputs (stringed numbers are accepted)\n   * or NaN and Error on number under 0 or over 3999.\n   *\n   * @param {Number/String} arabic\n   * @return {String}\n   */\n  function toRoman (arabic) {\n    // Checking input first with type comparisons, convert Number() instances to\n    // a literal, etc...\n    if (arabic instanceof Number) arabic = parseInt(arabic, 10);\n    if ('string' === typeof arabic || arabic instanceof String) {\n      arabic = parseInt(arabic, 10);\n      if (isNaN(arabic)) throw new TypeError('toArabic expects a number');\n    }\n    if ('number' !== typeof arabic) throw new TypeError('toArabic expects a number');\n\n    // Rounding up \"bad\" numbers: NaN, negative numbers, numbers over 3999,...\n    if (isNaN(arabic)) throw new TypeError('toArabic expects a real number');\n    if (arabic < 0) throw new Error('toArabic cannot express negative numbers');\n    if (arabic > 3999) throw new Error('toArabic cannot express numbers over 3999');\n\n    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as\n    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero\n    if (arabic === 0) return 'nulla';\n    var roman = '';\n\n    // Chomping away by the power of tenths\n    roman += upToTen(Math.floor(arabic / 1000), 'M', '', ''), arabic %= 1000;\n    roman += upToTen(Math.floor(arabic / 100), 'C', 'D', 'M'), arabic %= 100;\n    roman += upToTen(Math.floor(arabic / 10), 'X', 'L', 'C'), arabic %= 10;\n    roman += upToTen(arabic, 'I', 'V', 'X');\n    return roman;\n  };\n\n\n  module.exports = toRoman;\n\n})();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// Standard suffix manipulations.\n/** @type {Record<string, string>} */\nconst step2list = {\n  ational: 'ate',\n  tional: 'tion',\n  enci: 'ence',\n  anci: 'ance',\n  izer: 'ize',\n  bli: 'ble',\n  alli: 'al',\n  entli: 'ent',\n  eli: 'e',\n  ousli: 'ous',\n  ization: 'ize',\n  ation: 'ate',\n  ator: 'ate',\n  alism: 'al',\n  iveness: 'ive',\n  fulness: 'ful',\n  ousness: 'ous',\n  aliti: 'al',\n  iviti: 'ive',\n  biliti: 'ble',\n  logi: 'log'\n}\n\n/** @type {Record<string, string>} */\nconst step3list = {\n  icate: 'ic',\n  ative: '',\n  alize: 'al',\n  iciti: 'ic',\n  ical: 'ic',\n  ful: '',\n  ness: ''\n}\n\n// Consonant-vowel sequences.\nconst consonant = '[^aeiou]'\nconst vowel = '[aeiouy]'\nconst consonants = '(' + consonant + '[^aeiouy]*)'\nconst vowels = '(' + vowel + '[aeiou]*)'\n\nconst gt0 = new RegExp('^' + consonants + '?' + vowels + consonants)\nconst eq1 = new RegExp(\n  '^' + consonants + '?' + vowels + consonants + vowels + '?$'\n)\nconst gt1 = new RegExp('^' + consonants + '?(' + vowels + consonants + '){2,}')\nconst vowelInStem = new RegExp('^' + consonants + '?' + vowel)\nconst consonantLike = new RegExp('^' + consonants + vowel + '[^aeiouwxy]$')\n\n// Exception expressions.\nconst sfxLl = /ll$/\nconst sfxE = /^(.+?)e$/\nconst sfxY = /^(.+?)y$/\nconst sfxIon = /^(.+?(s|t))(ion)$/\nconst sfxEdOrIng = /^(.+?)(ed|ing)$/\nconst sfxAtOrBlOrIz = /(at|bl|iz)$/\nconst sfxEED = /^(.+?)eed$/\nconst sfxS = /^.+?[^s]s$/\nconst sfxSsesOrIes = /^.+?(ss|i)es$/\nconst sfxMultiConsonantLike = /([^aeiouylsz])\\1$/\nconst step2 =\n  /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/\nconst step3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/\nconst step4 =\n  /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/\n\n/**\n * Get the stem from a given value.\n *\n * @param {string} value\n *   Value to stem.\n * @returns {string}\n *   Stem for `value`\n */\n// eslint-disable-next-line complexity\nexport function stemmer(value) {\n  let result = String(value).toLowerCase()\n\n  // Exit early.\n  if (result.length < 3) {\n    return result\n  }\n\n  /** @type {boolean} */\n  let firstCharacterWasLowerCaseY = false\n\n  // Detect initial `y`, make sure it never matches.\n  if (\n    result.codePointAt(0) === 121 // Lowercase Y\n  ) {\n    firstCharacterWasLowerCaseY = true\n    result = 'Y' + result.slice(1)\n  }\n\n  // Step 1a.\n  if (sfxSsesOrIes.test(result)) {\n    // Remove last two characters.\n    result = result.slice(0, -2)\n  } else if (sfxS.test(result)) {\n    // Remove last character.\n    result = result.slice(0, -1)\n  }\n\n  /** @type {RegExpMatchArray|null} */\n  let match\n\n  // Step 1b.\n  if ((match = sfxEED.exec(result))) {\n    if (gt0.test(match[1])) {\n      // Remove last character.\n      result = result.slice(0, -1)\n    }\n  } else if ((match = sfxEdOrIng.exec(result)) && vowelInStem.test(match[1])) {\n    result = match[1]\n\n    if (sfxAtOrBlOrIz.test(result)) {\n      // Append `e`.\n      result += 'e'\n    } else if (sfxMultiConsonantLike.test(result)) {\n      // Remove last character.\n      result = result.slice(0, -1)\n    } else if (consonantLike.test(result)) {\n      // Append `e`.\n      result += 'e'\n    }\n  }\n\n  // Step 1c.\n  if ((match = sfxY.exec(result)) && vowelInStem.test(match[1])) {\n    // Remove suffixing `y` and append `i`.\n    result = match[1] + 'i'\n  }\n\n  // Step 2.\n  if ((match = step2.exec(result)) && gt0.test(match[1])) {\n    result = match[1] + step2list[match[2]]\n  }\n\n  // Step 3.\n  if ((match = step3.exec(result)) && gt0.test(match[1])) {\n    result = match[1] + step3list[match[2]]\n  }\n\n  // Step 4.\n  if ((match = step4.exec(result))) {\n    if (gt1.test(match[1])) {\n      result = match[1]\n    }\n  } else if ((match = sfxIon.exec(result)) && gt1.test(match[1])) {\n    result = match[1]\n  }\n\n  // Step 5.\n  if (\n    (match = sfxE.exec(result)) &&\n    (gt1.test(match[1]) ||\n      (eq1.test(match[1]) && !consonantLike.test(match[1])))\n  ) {\n    result = match[1]\n  }\n\n  if (sfxLl.test(result) && gt1.test(result)) {\n    result = result.slice(0, -1)\n  }\n\n  // Turn initial `Y` back to `y`.\n  if (firstCharacterWasLowerCaseY) {\n    result = 'y' + result.slice(1)\n  }\n\n  return result\n}\n","import { distance } from 'damerau-levenshtein-js';\nimport { stemmer } from 'stemmer';\n\n/**\n * Check if all elements of `tokens` are present in `reference`.\n * @param {string[]} tokens\n * @param {string[]} references\n * @param {number} strictness\n * @param {boolean} acceptSubstring\n * @param {boolean} useStemmer\n */\nexport default function referenceContainsTokens (tokens, references, strictness, acceptSubstring, useStemmer) {\n  let index = 0;\n  for (const token of tokens) {\n    let containsToken = false;\n    while (index < references.length) {\n      const reference = references[index];\n      index++;\n      const errors = useStemmer ? distance(stemmer(token), stemmer(reference)) : distance(token, reference);\n\n      if (strictness > 0 && strictness * errors <= reference.length) {\n        containsToken = true;\n        break;\n      }\n\n      if (acceptSubstring && reference.includes(token)) {\n        containsToken = true;\n        break;\n      }\n\n      if (errors === 0) {\n        containsToken = true;\n        break;\n      }\n    }\n\n    if (!containsToken) { return false; }\n  }\n\n  return true;\n}\n","/**\n * Get all words which are partially or wholly underlined.\n * @param {string} string\n * @returns {string}\n */\nfunction extractKeyWords (string) {\n  const requiredWords = extractUnderlining(string).split(' ');\n\n  string = string\n    .split(' ')\n    .filter(token => token.length > 0)\n    .filter(token => token.match(/<\\/?u>/) || requiredWords.includes(token))\n    .reduce((prev, curr) => prev + curr + ' ', '')\n    .trim();\n\n  return removeHTMLTags(string);\n}\n\n/**\n * Extracts the text in quotes from a given string.\n * @param {string} string - The input string.\n * @returns {string} - The extracted quotes or the string without HTML tags.\n */\nfunction extractQuotes (string) {\n  const matches = string.match(/\"[^\"]*(?=[\"])/g)?.map(match => match.slice(1));\n\n  if (matches) {\n    return removeHTMLTags(matches.reduce((prev, curr) => prev + ' ' + curr, '').trim());\n  } else {\n    return removeHTMLTags(string);\n  }\n}\n\n/**\n * Extracts the underlined text from a string.\n * If no underlined text is found, it removes HTML tags from the string.\n * @param {string} string - The input string.\n * @returns {string} - The extracted underlined text or the string without HTML tags.\n */\nfunction extractUnderlining (string) {\n  const matches = string.match(/<u>[^<]*(?=<\\/u>)/g)?.map(match => match.slice(3));\n\n  if (matches) {\n    return removeHTMLTags(matches.reduce((prev, curr) => prev + curr + ' ', '').trim());\n  } else {\n    return removeHTMLTags(string);\n  }\n}\n\n/**\n * Removes HTML tags from a string.\n * @param {string} string\n * @returns {string}\n */\nfunction removeHTMLTags (string) {\n  return string.replace(/<[^>]*>/g, '');\n}\n\nfunction removePunctuation (string) {\n  return string.replace(/[.,!;:'\"\\\\/?@#$%^&*_~’]/g, '');\n}\n\nexport {\n  extractKeyWords,\n  extractQuotes,\n  extractUnderlining,\n  removeHTMLTags,\n  removePunctuation\n};\n","import * as utils from './utils.js';\n\nconst elements = {\n  hydrogen: ['h'],\n  helium: ['he'],\n  lithium: ['li'],\n  beryllium: ['be'],\n  boron: ['b'],\n  carbon: ['c'],\n  nitrogen: ['n'],\n  oxygen: ['o'],\n  fluorine: ['f'],\n  neon: ['ne'],\n  sodium: ['na'],\n  magnesium: ['mg'],\n  aluminum: ['al'],\n  silicon: ['si'],\n  phosphorus: ['p'],\n  sulfur: ['s'],\n  chlorine: ['cl'],\n  argon: ['ar'],\n  potassium: ['k'],\n  calcium: ['ca'],\n  scandium: ['sc'],\n  titanium: ['ti'],\n  vanadium: ['v'],\n  chromium: ['cr'],\n  manganese: ['mn'],\n  iron: ['fe'],\n  cobalt: ['co'],\n  nickel: ['ni'],\n  copper: ['cu'],\n  zinc: ['zn'],\n  gallium: ['ga'],\n  germanium: ['ge'],\n  arsenic: ['as'],\n  selenium: ['se'],\n  bromine: ['br'],\n  krypton: ['kr'],\n  rubidium: ['rb'],\n  strontium: ['sr'],\n  yttrium: ['y'],\n  zirconium: ['zr'],\n  niobium: ['nb'],\n  molybdenum: ['mo'],\n  technetium: ['tc'],\n  ruthenium: ['ru'],\n  rhodium: ['rh'],\n  palladium: ['pd'],\n  silver: ['ag'],\n  cadmium: ['cd'],\n  indium: ['in'],\n  tin: ['sn'],\n  antimony: ['sb'],\n  tellurium: ['te'],\n  iodine: ['i'],\n  xenon: ['xe'],\n  cesium: ['cs'],\n  barium: ['ba'],\n  lanthanum: ['la'],\n  cerium: ['ce'],\n  praseodymium: ['pr'],\n  neodymium: ['nd'],\n  promethium: ['pm'],\n  samarium: ['sm'],\n  europium: ['eu'],\n  gadolinium: ['gd'],\n  terbium: ['tb'],\n  dysprosium: ['dy'],\n  holmium: ['ho'],\n  erbium: ['er'],\n  thulium: ['tm'],\n  ytterbium: ['yb'],\n  lutetium: ['lu'],\n  hafnium: ['hf'],\n  tantalum: ['ta'],\n  tungsten: ['w'],\n  rhenium: ['re'],\n  osmium: ['os'],\n  iridium: ['ir'],\n  platinum: ['pt'],\n  gold: ['au'],\n  mercury: ['hg'],\n  thallium: ['tl'],\n  lead: ['pb'],\n  bismuth: ['bi'],\n  polonium: ['po'],\n  astatine: ['at'],\n  radon: ['rn'],\n  francium: ['fr'],\n  radium: ['ra'],\n  actinium: ['ac'],\n  thorium: ['th'],\n  protactinium: ['pa'],\n  uranium: ['u'],\n  neptunium: ['np'],\n  plutonium: ['pu'],\n  americium: ['am'],\n  curium: ['cm'],\n  berkelium: ['bk'],\n  californium: ['cf'],\n  einsteinium: ['es'],\n  fermium: ['fm'],\n  mendelevium: ['md'],\n  nobelium: ['no'],\n  lawrencium: ['lr'],\n  rutherfordium: ['rf'],\n  dubnium: ['db'],\n  seaborgium: ['sg'],\n  bohrium: ['bh'],\n  hassium: ['hs'],\n  meitnerium: ['mt'],\n  darmstadtium: ['ds'],\n  roentgenium: ['rg'],\n  copernicium: ['cn'],\n  nihonium: ['nh'],\n  flerovium: ['fl'],\n  moscovium: ['mc'],\n  livermorium: ['lv'],\n  tennessine: ['ts'],\n  oganesson: ['og']\n};\n\nconst equivalentAnswers = {\n  ...elements,\n  'atomic bombs': ['atomic weapons', 'nuclear bombs', 'nuclear weapons', 'nukes', 'fission bombs', 'A-bombs'],\n  'nuclear weapons': ['atomic bombs', 'atomic weapons', 'nuclear bombs', 'nukes', 'fission bombs', 'A-bombs'],\n  nukes: ['atomic bombs', 'atomic weapons', 'nuclear bombs', 'nuclear weapons', 'fission bombs', 'A-bombs'],\n  fairytales: ['fairy tales'],\n  'fairy tales': ['fairytales'],\n  house: ['home', 'dwelling', 'residence'],\n  mouse: ['mice'],\n  rail: ['railroad'],\n  railroad: ['rail'],\n  'nineteen eighty-four': ['1984', 'nineteen eighty four'],\n  'nineteen eighty four': ['1984', 'nineteen eighty-four'],\n  'oxidation number': ['oxidation state'],\n  'oxidation state': ['oxidation number'],\n  'ralph vaughan-williams': ['rvw'],\n  spacewalk: ['space walk'],\n  spacewalks: ['space walk'],\n  'sugar cane': ['sugarcane'],\n  sugarcane: ['sugar cane'],\n  wavefunction: ['wave function'],\n  'Gulf of Mexico': ['Gulf of America'],\n  'wave function': ['wavefunction'],\n  'world war 1': ['first world war', 'great war', 'world war i', 'world war one'],\n  'world war i': ['first world war', 'great war', 'world war 1', 'world war one'],\n  'world war one': ['first world war', 'great war', 'world war 1', 'world war i'],\n  'world war ii': ['ww2', 'wwii', 'world war 2', 'world war two', 'second world war'],\n  'world war two': ['ww2', 'wwii', 'world war ii', 'world war 2', 'second world war'],\n  'world war 2': ['ww2', 'wwii', 'world war ii', 'world war two', 'second world war'],\n  'Kanye West': ['kayne', 'west'],\n  superconductors: ['super conductors', 'super conductor'],\n  'baha\\' i': ['bahai'],\n  'united states of america': ['united states', 'usa', 'us', 'america'],\n  'the united states of america': ['united states', 'usa', 'us', 'america'],\n  usa: ['united states', 'us', 'america']\n};\n\n/**\n * Get the abbreviation of a string by taking the first letter of each word.\n * For example, \"World Health Organization\" becomes \"WHO\".\n * @param {string} string\n * @returns {string}\n */\nfunction getAbbreviation (string) {\n  return string\n    .split(' ')\n    .filter(token => token.length > 0)\n    .map(token => utils.removeHTMLTags(token).charAt(0))\n    .reduce((a, b) => a + b, '')\n    .trim();\n}\n\n/**\n * @param {string} formattedAnswer\n * @param {boolean} isMainAnswer\n * @returns {string[]}\n */\nexport default function generateUnformattedAnswers (formattedAnswer, isMainAnswer) {\n  if (/-/.test(formattedAnswer)) {\n    const object1 = generateUnformattedAnswers(formattedAnswer.replace(/-/g, ' '), isMainAnswer);\n    const object2 = generateUnformattedAnswers(formattedAnswer.replace(/-/g, ''), isMainAnswer);\n    return [...object1, ...object2];\n  }\n\n  const answers = [\n    utils.removeHTMLTags(formattedAnswer),\n    utils.extractUnderlining(formattedAnswer),\n    utils.extractKeyWords(formattedAnswer),\n    utils.extractQuotes(formattedAnswer)\n  ];\n\n  if (isMainAnswer) {\n    for (const answer of [formattedAnswer, utils.extractUnderlining(formattedAnswer)]) {\n      const abbreviation = getAbbreviation(answer);\n      if (abbreviation.length > 1) {\n        answers.push(abbreviation);\n      }\n    }\n  }\n\n  if (answers[0] in equivalentAnswers) {\n    answers.push(...equivalentAnswers[answers[0]]);\n  }\n\n  return answers.map(answer => utils.removePunctuation(answer));\n}\n","export const DIRECTIVES = {\n  accept: ['accept', 'or', 'antiprompt on', 'anti-prompt on', 'antiprompt', 'anti-prompt'],\n  prompt: ['prompt on', 'prompt'],\n  reject: ['reject', 'do not accept or prompt on', 'do not accept', 'do not prompt on', 'do not prompt']\n};\nexport const DIRECTIVES_FLATTENED = Object.values(DIRECTIVES).flat();\n\nexport const SPECIAL_DIRECTIVES = {\n  'accept either': ['accept either', 'accept any'],\n  'prompt on partial': ['prompt on partial', 'prompt on a partial', 'prompt on either']\n};\n","import { DIRECTIVES } from './constants.js';\nimport * as utils from './utils.js';\n\n/**\n * @param {string} clause\n * @returns {{directive: \"accept\" | \"prompt\" | \"reject\", clause: string}}\n */\nfunction getDirective (clause) {\n  for (const directive of Object.keys(DIRECTIVES)) {\n    for (const phrase of DIRECTIVES[directive]) {\n      if (clause.startsWith(phrase)) {\n        clause = clause.replace(phrase, '').trim();\n        return { directive, clause };\n      }\n    }\n  }\n\n  return { directive: 'accept', clause };\n}\n\n/**\n * @param {string} clause\n */\nfunction getDirectedPrompt (clause) {\n  for (const key of ['by asking', 'with']) {\n    const index = clause.indexOf(key);\n    if (index < 0) { continue; }\n\n    const directedPrompt = utils.extractQuotes(clause.slice(index + key.length));\n    clause = clause.slice(0, index).trim();\n    return { directedPrompt, clause };\n  }\n\n  return { clause };\n}\n\n/**\n * @param {string} section\n * @param {boolean} isMainAnswer\n */\nexport default function splitSectionIntoParsedClauses (section, isMainAnswer) {\n  const clauses = section.split(';').map(clause => clause.trim());\n  const regex = isMainAnswer ? /,? or / : /,? or |, /;\n  const parsedClauses = [];\n\n  for (let clause of clauses) {\n    let directive;\n    ({ directive, clause } = getDirective(clause));\n    let directedPrompt;\n    if (directive === 'prompt') {\n      ({ directedPrompt, clause } = getDirectedPrompt(clause));\n    }\n\n    let formattedAnswers = clause.split(regex);\n    formattedAnswers = formattedAnswers.map(token => token.trim()).filter(token => token.length > 0);\n    parsedClauses.push({ directive, formattedAnswers, directedPrompt, isMainAnswer });\n  }\n\n  return parsedClauses;\n}\n","import numberToWords from 'number-to-words';\nimport { toArabic } from 'roman-numerals';\n\nconst { toWords } = numberToWords;\n\nconst typoCorrections = {\n  сontainor: 'container',\n  сontainors: 'containers',\n  сontains: 'contains',\n  contentinal: 'continental',\n  évaluate: 'evaluate',\n  mittani: 'mitanni',\n  ludmilla: 'lyudmila',\n  grandma: 'grandmother',\n  grandpa: 'grandfather',\n  sulayman: 'solomon'\n};\n\nconst ordinalConversions = {\n  '1st': 'first',\n  '2nd': 'second',\n  '3rd': 'third',\n  '4th': 'fourth',\n  '5th': 'fifth',\n  '6th': 'sixth',\n  '7th': 'seventh',\n  '8th': 'eighth',\n  '9th': 'ninth',\n  '10th': 'tenth',\n  '11th': 'eleventh',\n  '12th': 'twelfth',\n  '13th': 'thirteenth',\n  '14th': 'fourteenth',\n  '15th': 'fifteenth',\n  '16th': 'sixteenth',\n  '17th': 'seventeenth',\n  '18th': 'eighteenth',\n  '19th': 'nineteenth',\n  '20th': 'twentieth',\n  '30th': 'thirtieth',\n  '40th': 'fortieth',\n  '50th': 'fiftieth',\n  '60th': 'sixtieth',\n  '70th': 'seventieth',\n  '80th': 'eightieth',\n  '90th': 'ninetieth'\n};\n\nconst honorificConversions = {\n  dr: 'doctor',\n  st: 'saint',\n  mr: 'mister',\n  mrs: 'missus',\n  ms: 'miss',\n  esq: 'esquire',\n  jr: 'junior',\n  sr: 'senior',\n  rev: 'reverend',\n  fr: 'father',\n  prof: 'professor',\n  hon: 'honorable',\n  pres: 'president',\n  vp: 'vice president',\n  gov: 'governor',\n  ofc: 'officer',\n  pr: 'pastor',\n  br: 'brother',\n  rep: 'representative',\n  // 'M': 'Monsieur', this might convert things that are not honorifics.\n  Mme: 'Madame',\n  Mlle: 'Mademoiselle',\n  Hr: 'Herr',\n  Fr: 'Frau'\n};\n\n// XXX: There will most definatly be cases where this dictionary might erroneously convert a non-unit word to a unit.\n// For example, \"in\" could be a preposition or an abbreviation for \"inch\".\n// As a concequence, some single letter abbeviations are commented out for now.\nconst unitConversions = {\n  // SI units\n  // 's': 'second',\n  // 'm': 'metere',\n  kg: 'kilogram',\n  mol: 'mole',\n  cd: 'candela',\n  // 'A': 'ampere',\n  // 'K': 'kelvin',\n  // 22 Derived units\n  Hz: 'hertz',\n  // 'N': 'newton',\n  Pa: 'pascal',\n  rad: 'radian',\n  // 'sr': 'steradian',\n  W: 'watt',\n  // 'C': 'coulomb', // might be speed of light?\n  J: 'joule',\n  V: 'volt',\n  Wb: 'weber',\n  F: 'farad',\n  Ohm: 'ohm',\n  Ω: 'ohm',\n  // 'S': 'siemens',\n  kat: 'katal',\n  lm: 'lumen',\n  lx: 'lux',\n  Bq: 'becquerel',\n  Gy: 'gray',\n  Sv: 'sievert',\n  // imperical units\n  in: 'inch',\n  ft: 'foot',\n  yd: 'yard',\n  mi: 'mile',\n  nmi: 'nautical mile',\n  sqmi: 'square mile',\n  gal: 'gallon',\n  qt: 'quart',\n  pt: 'pint',\n  cup: 'cup'\n};\n\n// very humourous, in'it?\nconst britishConversions = {\n  colour: 'color',\n  flavour: 'flavor',\n  humour: 'humor',\n  labour: 'labor',\n  neighbour: 'neighbor',\n  odour: 'odor',\n  organize: 'organise',\n  leukaemia: 'leukemia',\n  manoeuvre: 'maneuver',\n  oestrogen: 'estrogen',\n  paediatric: 'pediatric'\n};\n\nconst muhammadConversions = {\n  muhammed: 'muhammad',\n  muhamad: 'muhammad',\n  mohammad: 'muhammad',\n  mohammed: 'muhammad',\n  mahammad: 'muhammad',\n  maxammed: 'muhammad',\n  mehemmed: 'muhammad',\n  mohamad: 'muhammad',\n  mohamed: 'muhammad'\n};\n\n/**\n * Tries to interpret token as a roman numeral and convert it to a word.\n * @param {string} token\n */\nfunction romanToWord (token) {\n  try {\n    token = toArabic(token);\n  } catch (e) {\n    if (e.message !== 'toArabic expects a valid roman number' && !(e instanceof TypeError)) {\n      throw e;\n    } else {\n      return token;\n    }\n  }\n  return toWords(token);\n}\n\n/**\n * Generates standardized tokens from a string.\n * @param {string} string\n * @param {boolean} sort - Whether to sort the tokens alphabetically before returning.\n */\nexport default function tokenize (string, sort = false) {\n  const tokens = string.split(' ').filter(token => token.length > 0);\n\n  for (let i = 0; i <= tokens.length - 1; i++) {\n    if (Object.prototype.hasOwnProperty.call(ordinalConversions, tokens[i])) {\n      tokens[i] = ordinalConversions[tokens[i]];\n    }\n\n    if (Object.prototype.hasOwnProperty.call(honorificConversions, tokens[i])) {\n      tokens[i] = honorificConversions[tokens[i]];\n    }\n\n    if (Object.prototype.hasOwnProperty.call(unitConversions, tokens[i])) {\n      tokens[i] = unitConversions[tokens[i]];\n    }\n\n    if (Object.prototype.hasOwnProperty.call(britishConversions, tokens[i])) {\n      tokens[i] = britishConversions[tokens[i]];\n    }\n\n    if (Object.prototype.hasOwnProperty.call(typoCorrections, tokens[i])) {\n      tokens[i] = typoCorrections[tokens[i]];\n    }\n\n    if (Object.prototype.hasOwnProperty.call(muhammadConversions, tokens[i])) {\n      tokens[i] = muhammadConversions[tokens[i]];\n    }\n\n    if (tokens[i].endsWith('s') && tokens[i].length > 1 && isFinite(tokens[i].at(-2))) {\n      tokens[i] = tokens[i].slice(0, -1);\n    }\n\n    tokens[i] = romanToWord(tokens[i]);\n\n    if (isFinite(tokens[i])) {\n      tokens[i] = parseInt(tokens[i]);\n      tokens[i] = tokens[i] <= 100 ? toWords(tokens[i]) : tokens[i].toString();\n    }\n  }\n\n  return tokens.sort();\n}\n","import referenceContainsTokens from './contains-tokens.js';\nimport generateUnformattedAnswers from './generate-unformatted-answers.js';\nimport getSpecialDirectives from './get-special-directives.js';\nimport splitIntoSections from './split-into-sections.js';\nimport splitSectionIntoParsedClauses from './split-section-into-clauses.js';\nimport tokenize from './tokenize.js';\nimport * as utils from './utils.js';\n\n/**\n * @param {string} string\n * @returns\n */\nfunction normalizeString (string) {\n  return string\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // replace special characters\n    .toLowerCase()\n    .replace(/\\(s\\)/g, 's') // standardize (s) -> s\n    .replace(/[\"“‟❝”❞]/g, '\"') // replace all types of quotes with the same quote\n    .replace(/[\\u2018-\\u201B]/g, '\\'') // replace all types of single quotes with the same quote\n    .replace(/\\p{Pd}/gu, '-') // replace all dashes with the same dash\n    .replace(/[\\u00B7\\u22C5\\u2027]/g, '') // interpuncts\n    .replace(/<\\/?i>/g, ''); // remove italics\n}\n\n/**\n * Check if the given answer matches the answerline.\n * @param {string} answerline\n * @param {string} givenAnswer\n * @param {number} [strictness]\n * @param {boolean} [verbose] - whether to print debug information\n * @returns {{directive: \"accept\" | \"prompt\" | \"reject\", directedPrompt: string | undefined}}\n */\nfunction checkAnswer (answerline, givenAnswer, strictness = 7, verbose = false) {\n  if (typeof answerline !== 'string' || typeof givenAnswer !== 'string') {\n    return { directive: 'reject', directedPrompt: undefined };\n  }\n\n  if (answerline === '' || givenAnswer === '') {\n    return { directive: 'reject', directedPrompt: undefined };\n  }\n\n  if (typeof strictness !== 'number' || strictness < 0) {\n    strictness = 7;\n  }\n\n  if (/<b>/.test(answerline) && !/<u>/.test(answerline)) {\n    answerline = answerline.replace(/<b>/g, '<u>').replace(/<\\/b>/g, '</u>');\n  }\n\n  const isFormattedAnswerline = /<u>/.test(answerline);\n\n  answerline = normalizeString(answerline);\n\n  givenAnswer = normalizeString(givenAnswer);\n  givenAnswer = utils.removePunctuation(givenAnswer);\n  const givenAnswerTokens = tokenize(givenAnswer, true);\n\n  const sections = splitIntoSections(answerline);\n  const parsedClauses = sections.flatMap((section, index) => splitSectionIntoParsedClauses(section, index === 0));\n  const mainAnswer = parsedClauses[0].formattedAnswers[0];\n\n  if (!isFormattedAnswerline && mainAnswer?.length > 1 && givenAnswer.length === 1 && isNaN(givenAnswer)) {\n    return { directive: 'reject' };\n  }\n\n  for (const specialDirective of getSpecialDirectives(answerline)) {\n    if (specialDirective === 'accept either') {\n      parsedClauses.push({ directive: 'accept', formattedAnswers: mainAnswer.split(' ') });\n    }\n\n    if (specialDirective === 'prompt on partial') {\n      parsedClauses.push({ directive: 'prompt', formattedAnswers: mainAnswer.split(' ') });\n    }\n  }\n\n  parsedClauses.sort((a, b) => (a.directive === 'reject' ? -1 : 1) - (b.directive === 'reject' ? -1 : 1));\n\n  for (const { directive, formattedAnswers, directedPrompt, isMainAnswer } of parsedClauses) {\n    for (const formattedAnswer of formattedAnswers) {\n      for (const unformattedAnswer of generateUnformattedAnswers(formattedAnswer, isMainAnswer)) {\n        if (unformattedAnswer === '') { continue; }\n\n        const tokens = tokenize(unformattedAnswer, true);\n        let matches;\n\n        if (directive === 'reject') {\n          matches = unformattedAnswer === givenAnswer;\n        } else {\n          matches = referenceContainsTokens(\n            isFormattedAnswerline ? tokens : givenAnswerTokens,\n            isFormattedAnswerline ? givenAnswerTokens : tokens,\n            strictness,\n            !isFormattedAnswerline,\n            true\n          );\n        }\n\n        if (matches) { return { directive, directedPrompt }; }\n      }\n    }\n  }\n\n  return { directive: 'reject' };\n}\n\nexport default checkAnswer;\n","import { DIRECTIVES_FLATTENED } from './constants.js';\n\n/**\n * Removes parentheses and square brackets from a string.\n * @param {string} string - The input string.\n * @returns {string} The string with parentheses and square brackets removed.\n */\nfunction removeParentheses (string) {\n  return string.replace(/\\([^)]*\\)/g, '').replace(/\\[[^\\]]*\\]/g, '');\n}\n\n/**\n *\n * @param {string} answerline\n * @returns {string[]} An array of **answer sections**, where the first element is the **main answer section**.\n */\nexport default function splitIntoSections (answerline) {\n  const mainSection = removeParentheses(answerline);\n\n  let bracketSections = answerline.match(/\\[[^\\]]*(?=\\])/g) ?? [];\n  bracketSections = bracketSections.map(section => section.slice(1));\n  let parenthesisSections = answerline.match(/\\([^)]*(?=\\))/g) ?? [];\n  parenthesisSections = parenthesisSections.map(section => section.slice(1));\n\n  bracketSections = bracketSections.filter(section => DIRECTIVES_FLATTENED.some(directive => section.startsWith(directive)));\n  parenthesisSections = parenthesisSections.filter(section => DIRECTIVES_FLATTENED.some(directive => section.startsWith(directive)));\n\n  return [mainSection, ...bracketSections, ...parenthesisSections];\n}\n","import { SPECIAL_DIRECTIVES } from './constants.js';\n\n/**\n * @param {string} answerline\n */\nexport default function getSpecialDirectives (answerline) {\n  const directives = [];\n\n  for (const directive of Object.keys(SPECIAL_DIRECTIVES)) {\n    for (const phrase of SPECIAL_DIRECTIVES[directive]) {\n      if (answerline.includes(phrase)) {\n        directives.push(directive);\n      }\n    }\n  }\n\n  return directives;\n}\n"],"names":["damerau","i","j","s1","s2","d","cost","Math","min","apply","distance","undefined","length","initMatrix","charAt","module","exports","distanceProm","Promise","resolve","reject","result","minDistanceProm","list","Array","isArray","forEach","f","e","l","abs","self","g","global","n","r","o","s","zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","h","test","replace","a","t","p","v","b","y","c","m","w","x","parseInt","TypeError","RangeError","arguments","join","push","floor","M","toOrdinal","String","toWords","toWordsOrdinal","numberToWords","toArabic","toRoman","prototype","roman","toUpperCase","match","Error","arabic","upToTen","num","value","Number","isNaN","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","this","Function","window","step2list","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","step3list","icate","ative","alize","iciti","ical","ful","ness","vowel","consonants","vowels","gt0","RegExp","eq1","gt1","vowelInStem","consonantLike","sfxLl","sfxE","sfxY","sfxIon","sfxEdOrIng","sfxAtOrBlOrIz","sfxEED","sfxS","sfxSsesOrIes","sfxMultiConsonantLike","step2","step3","step4","stemmer","toLowerCase","firstCharacterWasLowerCaseY","codePointAt","slice","exec","referenceContainsTokens","tokens","references","strictness","acceptSubstring","useStemmer","index","token","containsToken","reference","errors","includes","extractKeyWords","string","requiredWords","extractUnderlining","split","removeHTMLTags","filter","reduce","prev","curr","trim","extractQuotes","matches","map","removePunctuation","equivalentAnswers","hydrogen","helium","lithium","beryllium","boron","carbon","nitrogen","oxygen","fluorine","neon","sodium","magnesium","aluminum","silicon","phosphorus","sulfur","chlorine","argon","potassium","calcium","scandium","titanium","vanadium","chromium","manganese","iron","cobalt","nickel","copper","zinc","gallium","germanium","arsenic","selenium","bromine","krypton","rubidium","strontium","yttrium","zirconium","niobium","molybdenum","technetium","ruthenium","rhodium","palladium","silver","cadmium","indium","tin","antimony","tellurium","iodine","xenon","cesium","barium","lanthanum","cerium","praseodymium","neodymium","promethium","samarium","europium","gadolinium","terbium","dysprosium","holmium","erbium","thulium","ytterbium","lutetium","hafnium","tantalum","tungsten","rhenium","osmium","iridium","platinum","gold","mercury","thallium","lead","bismuth","polonium","astatine","radon","francium","radium","actinium","thorium","protactinium","uranium","neptunium","plutonium","americium","curium","berkelium","californium","einsteinium","fermium","mendelevium","nobelium","lawrencium","rutherfordium","dubnium","seaborgium","bohrium","hassium","meitnerium","darmstadtium","roentgenium","copernicium","nihonium","flerovium","moscovium","livermorium","tennessine","oganesson","nukes","fairytales","house","mouse","rail","railroad","spacewalk","spacewalks","sugarcane","wavefunction","superconductors","usa","generateUnformattedAnswers","formattedAnswer","isMainAnswer","answers","answer","abbreviation","DIRECTIVES","accept","prompt","DIRECTIVES_FLATTENED","Object","values","flat","SPECIAL_DIRECTIVES","getDirective","clause","directive","keys","phrase","startsWith","getDirectedPrompt","key","indexOf","directedPrompt","typoCorrections","contentinal","mittani","ludmilla","grandma","grandpa","sulayman","ordinalConversions","honorificConversions","dr","st","mr","mrs","ms","esq","jr","sr","rev","fr","prof","hon","pres","vp","gov","ofc","pr","br","rep","Mme","Mlle","Hr","Fr","unitConversions","kg","mol","cd","Hz","Pa","rad","W","J","V","Wb","F","Ohm","kat","lm","lx","Bq","Gy","Sv","in","ft","yd","mi","nmi","sqmi","gal","qt","pt","cup","britishConversions","colour","flavour","humour","labour","neighbour","odour","organize","leukaemia","manoeuvre","oestrogen","paediatric","muhammadConversions","muhammed","muhamad","mohammad","mohammed","mahammad","maxammed","mehemmed","mohamad","mohamed","romanToWord","message","tokenize","sort","hasOwnProperty","call","endsWith","isFinite","at","toString","normalizeString","normalize","answerline","givenAnswer","verbose","isFormattedAnswerline","givenAnswerTokens","parsedClauses","mainSection","bracketSections","section","parenthesisSections","some","splitIntoSections","flatMap","clauses","regex","formattedAnswers","splitSectionIntoParsedClauses","mainAnswer","specialDirective","directives","getSpecialDirectives","unformattedAnswer"],"sourceRoot":""}